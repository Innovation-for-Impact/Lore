/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/achievements/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        get: operations["achievements_list"];
        put?: never;
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        post: operations["achievements_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/achievements/{achievement_pk}/achievers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for all lore users.
         *
         *     Can be searched by first and last name
         *     Filter for what group a user is in with `member_of`
         *     Filter for who accomplished an achievement with `achievement` */
        get: operations["achievements_achievers_list"];
        put?: never;
        /** @description Add or delete the authenticated user to the list of achievers.
         *
         *     Returns the authenticated user on success */
        post: operations["achievements_achievers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/achievements/{achievement_pk}/achievers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for all lore users.
         *
         *     Can be searched by first and last name
         *     Filter for what group a user is in with `member_of`
         *     Filter for who accomplished an achievement with `achievement` */
        get: operations["achievements_achievers_retrieve"];
        put?: never;
        post?: never;
        /** @description Remove the authenticated user from the achievement.
         *
         *     Returns no content on success
         *     Raises a 404 if the membership doesn't exist. */
        delete: operations["achievements_achievers_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/achievements/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        get: operations["achievements_retrieve"];
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        put: operations["achievements_update"];
        post?: never;
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        delete: operations["achievements_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        patch: operations["achievements_partial_update"];
        trace?: never;
    };
    "/api/v1/auth/google/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Handles google AUTH.
         *
         *     Create a post request with the authentication code
         *     provide by Google on the callback url. */
        post: operations["auth_google_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Check the credentials and return the REST Token
         *     if the credentials are valid and authenticated.
         *     Calls Django Auth login method to register User ID
         *     in Django session framework
         *
         *     Accept the following POST parameters: username, password
         *     Return the REST Framework Token Object's key. */
        post: operations["auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django logout method and delete the Token object
         *     assigned to the current User object.
         *
         *     Accepts/Returns nothing. */
        post: operations["auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/password/change/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django Auth SetPasswordForm save method.
         *
         *     Accepts the following POST parameters: new_password1, new_password2
         *     Returns the success/fail message. */
        post: operations["auth_password_change_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/password/reset/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django Auth PasswordResetForm save method.
         *
         *     Accepts the following POST parameters: email
         *     Returns the success/fail message. */
        post: operations["auth_password_reset_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/password/reset/confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Password reset e-mail link is confirmed, therefore
         *     this resets the user's password.
         *
         *     Accepts the following POST parameters: token, uid,
         *         new_password1, new_password2
         *     Returns the success/fail message. */
        post: operations["auth_password_reset_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/registration/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Registers a new user.
         *
         *     Accepts the following POST parameters: username, email, password1, password2. */
        post: operations["auth_registration_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/registration/resend-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Resends another email to an unverified email.
         *
         *     Accepts the following POST parameter: email. */
        post: operations["auth_registration_resend_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/registration/verify-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Verifies the email associated with the provided key.
         *
         *     Accepts the following POST parameter: key. */
        post: operations["auth_registration_verify_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["auth_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/token/verify/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a token and indicates if it is valid.  This view provides no
         *     information about a token's fitness for a particular use. */
        post: operations["auth_token_verify_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        get: operations["auth_user_retrieve"];
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        put: operations["auth_user_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        patch: operations["auth_user_partial_update"];
        trace?: never;
    };
    "/api/v1/feed/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an ordererd list by timestamp of recent actions.
         *
         *     Query can be limited to a specific group by specifying the group_id
         *     query parameter. */
        get: operations["feed_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Queryset for groups. */
        get: operations["groups_list"];
        put?: never;
        /** @description Queryset for groups. */
        post: operations["groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/{loregroup_pk}/achievements/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        get: operations["groups_achievements_list"];
        put?: never;
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        post: operations["groups_achievements_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/{loregroup_pk}/achievements/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        get: operations["groups_achievements_retrieve"];
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        put: operations["groups_achievements_update"];
        post?: never;
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        delete: operations["groups_achievements_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for achievements.
         *
         *     Supports filtering by group_id and searching by description and title
         *     Achievements can only be created when querying by a specific group.
         *
         *     To create an achievemet, it expects an `image`, 'description', and 'title'
         *     fields. The group is automatically set by the query parameters. */
        patch: operations["groups_achievements_partial_update"];
        trace?: never;
    };
    "/api/v1/groups/{loregroup_pk}/images/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        get: operations["groups_images_list"];
        put?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        post: operations["groups_images_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/{loregroup_pk}/images/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        get: operations["groups_images_retrieve"];
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        put: operations["groups_images_update"];
        post?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        delete: operations["groups_images_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        patch: operations["groups_images_partial_update"];
        trace?: never;
    };
    "/api/v1/groups/{loregroup_pk}/members/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for group members.
         *
         *     Supports listing, retrieving, and deleting members */
        get: operations["groups_members_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/{loregroup_pk}/members/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for group members.
         *
         *     Supports listing, retrieving, and deleting members */
        get: operations["groups_members_retrieve"];
        put?: never;
        post?: never;
        /** @description Remove the user from the group.
         *
         *     Raises a 404 if the membership doesn't exist. */
        delete: operations["groups_members_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/{loregroup_pk}/quotes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        get: operations["groups_quotes_retrieve"];
        put?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        post: operations["groups_quotes_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/{loregroup_pk}/quotes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        get: operations["groups_quotes_retrieve_2"];
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        put: operations["groups_quotes_update"];
        post?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        delete: operations["groups_quotes_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        patch: operations["groups_quotes_partial_update"];
        trace?: never;
    };
    "/api/v1/groups/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Queryset for groups. */
        get: operations["groups_retrieve"];
        /** @description Queryset for groups. */
        put: operations["groups_update"];
        post?: never;
        /** @description Destroy the group if it exists and there is at most 1 member. */
        delete: operations["groups_destroy"];
        options?: never;
        head?: never;
        /** @description Queryset for groups. */
        patch: operations["groups_partial_update"];
        trace?: never;
    };
    "/api/v1/groups/join/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Route for the logged in user to join a group.
         *
         *     Expects a "join_code" in the post request
         *     Raises a 401 error if the join code is missing
         *     Raises a 404 error if there is no group with the join code
         *     Raises a 409 error if the user is already in the group */
        post: operations["groups_join_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/images/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        get: operations["images_list"];
        put?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        post: operations["images_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/images/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        get: operations["images_retrieve"];
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        put: operations["images_update"];
        post?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        delete: operations["images_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and searching by description
         *     Images can only be created when querying by a specific group.
         *
         *     To create an image, it expects an `image` and optional `description` field.
         *     The group is automatically set by the query parameters. */
        patch: operations["images_partial_update"];
        trace?: never;
    };
    "/api/v1/quotes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        get: operations["quotes_retrieve"];
        put?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        post: operations["quotes_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/quotes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        get: operations["quotes_retrieve_2"];
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        put: operations["quotes_update"];
        post?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        delete: operations["quotes_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for quotes.
         *
         *     Supports filtering by group_id and said_by_id, and also searching by text
         *     Quotes can only be created when querying by a specific group.
         *
         *     To create a quote, it expects a `text` and `said_by` field. The group
         *     is automatically set by the query parameters. */
        patch: operations["quotes_partial_update"];
        trace?: never;
    };
    "/api/v1/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for all lore users.
         *
         *     Can be searched by first and last name
         *     Filter for what group a user is in with `member_of`
         *     Filter for who accomplished an achievement with `achievement` */
        get: operations["users_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for all lore users.
         *
         *     Can be searched by first and last name
         *     Filter for what group a user is in with `member_of`
         *     Filter for who accomplished an achievement with `achievement` */
        get: operations["users_retrieve"];
        /** @description Viewset for all lore users.
         *
         *     Can be searched by first and last name
         *     Filter for what group a user is in with `member_of`
         *     Filter for who accomplished an achievement with `achievement` */
        put: operations["users_update"];
        post?: never;
        /** @description Viewset for all lore users.
         *
         *     Can be searched by first and last name
         *     Filter for what group a user is in with `member_of`
         *     Filter for who accomplished an achievement with `achievement` */
        delete: operations["users_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for all lore users.
         *
         *     Can be searched by first and last name
         *     Filter for what group a user is in with `member_of`
         *     Filter for who accomplished an achievement with `achievement` */
        patch: operations["users_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Serializer for the achievement detail.
         *
         *     Serializes the images's:
         *       - id (read only)
         *       - title
         *       - image
         *       - description
         *       - achieved_by (write only)
         *       - achieved_by_url (read only)
         *       - group (read only)
         *       - group_url (read only)
         *       - created (read only)
         *       - url (read only) */
        Achievement: {
            readonly id: number;
            title: string;
            /** Format: uri */
            image?: string;
            description: string;
            achieved_by: number[];
            /** @description Get the number of users that achieved this. */
            readonly num_achieved: number;
            readonly group: number;
            /** Format: date-time */
            readonly created: string;
            /** Format: uri */
            readonly url: string;
            /** Format: uri */
            readonly achievers_url: string;
            /** Format: uri */
            readonly group_url: string;
            /** @description Get the url for the authenticated user. */
            readonly logged_in_user_url: string | null;
        };
        /** @description Limits what achievement fields can be updated.
         *
         *     Achieved_by is read only */
        AchievementUpdate: {
            readonly id: number;
            title: string;
            /** Format: uri */
            image?: string;
            description: string;
            /** @description Get the number of users that achieved this. */
            readonly num_achieved: number;
            readonly group: number;
            /** Format: date-time */
            readonly created: string;
            /** Format: uri */
            readonly url: string;
            /** Format: uri */
            readonly achievers_url: string;
            /** Format: uri */
            readonly group_url: string;
            /** @description Get the url for the authenticated user. */
            readonly logged_in_user_url: string | null;
        };
        /** @description Serializes a group.
         *
         *     Provides the following fields:
         *     - id (read only)
         *     - name
         *     - members_url (read only)
         *     - join_code (read only)
         *     - avatar
         *     - created (read only)
         *     - url (read only)
         *     - members (write only) */
        Group: {
            readonly id: number;
            name: string;
            members: number[];
            /** @description Get the number of members in the group. */
            readonly num_members: number;
            readonly join_code: string;
            /** Format: uri */
            avatar?: string | null;
            location: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: uri */
            readonly url: string;
            /** Format: uri */
            readonly achievements_url: string;
            /** Format: uri */
            readonly quotes_url: string;
            /** Format: uri */
            readonly images_url: string;
            /** Format: uri */
            readonly members_url: string;
            /** @description Get the url to leave the group. */
            readonly logged_in_member_url: string;
        };
        /** @description Serializer that limits what group fields can be updated.
         *
         *     Members cannot be updated */
        GroupUpdate: {
            readonly id: number;
            name: string;
            /** @description Get the number of members in the group. */
            readonly num_members: number;
            readonly join_code: string;
            /** Format: uri */
            avatar?: string | null;
            location: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: uri */
            readonly url: string;
            /** Format: uri */
            readonly achievements_url: string;
            /** Format: uri */
            readonly quotes_url: string;
            /** Format: uri */
            readonly images_url: string;
            /** Format: uri */
            readonly members_url: string;
            /** @description Get the url to leave the group. */
            readonly logged_in_member_url: string;
        };
        /** @description Serializer for the image detail.
         *
         *     Serializes the images's:
         *       - id
         *       - image
         *       - description
         *       - group
         *       - group_url
         *       - created
         *       - url */
        Image: {
            readonly id: number;
            /** Format: uri */
            image: string;
            description?: string;
            readonly group: number;
            /** Format: date-time */
            readonly created: string;
            /** Format: uri */
            readonly url: string;
            /** Format: uri */
            readonly group_url: string;
        };
        /** @description Serializer for JWT authentication. */
        JWT: {
            access: string;
            refresh: string;
            user: components["schemas"]["User"];
        };
        Join: {
            join_code: string;
        };
        Login: {
            username?: string;
            /** Format: email */
            email?: string;
            password: string;
        };
        PaginatedAchievementList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Achievement"][];
        };
        PaginatedGroupList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Group"][];
        };
        PaginatedImageList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Image"][];
        };
        PaginatedUserList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["User"][];
        };
        PasswordChange: {
            new_password1: string;
            new_password2: string;
        };
        /** @description Serializer for requesting a password reset e-mail. */
        PasswordReset: {
            /** Format: email */
            email: string;
        };
        /** @description Serializer for confirming a password reset attempt. */
        PasswordResetConfirm: {
            new_password1: string;
            new_password2: string;
            uid: string;
            token: string;
        };
        /** @description Limits what achievement fields can be updated.
         *
         *     Achieved_by is read only */
        PatchedAchievementUpdate: {
            readonly id?: number;
            title?: string;
            /** Format: uri */
            image?: string;
            description?: string;
            /** @description Get the number of users that achieved this. */
            readonly num_achieved?: number;
            readonly group?: number;
            /** Format: date-time */
            readonly created?: string;
            /** Format: uri */
            readonly url?: string;
            /** Format: uri */
            readonly achievers_url?: string;
            /** Format: uri */
            readonly group_url?: string;
            /** @description Get the url for the authenticated user. */
            readonly logged_in_user_url?: string | null;
        };
        /** @description Serializer that limits what group fields can be updated.
         *
         *     Members cannot be updated */
        PatchedGroupUpdate: {
            readonly id?: number;
            name?: string;
            /** @description Get the number of members in the group. */
            readonly num_members?: number;
            readonly join_code?: string;
            /** Format: uri */
            avatar?: string | null;
            location?: string;
            /** Format: date-time */
            readonly created?: string;
            /** Format: uri */
            readonly url?: string;
            /** Format: uri */
            readonly achievements_url?: string;
            /** Format: uri */
            readonly quotes_url?: string;
            /** Format: uri */
            readonly images_url?: string;
            /** Format: uri */
            readonly members_url?: string;
            /** @description Get the url to leave the group. */
            readonly logged_in_member_url?: string;
        };
        /** @description Serializer for the image detail.
         *
         *     Serializes the images's:
         *       - id
         *       - image
         *       - description
         *       - group
         *       - group_url
         *       - created
         *       - url */
        PatchedImage: {
            readonly id?: number;
            /** Format: uri */
            image?: string;
            description?: string;
            readonly group?: number;
            /** Format: date-time */
            readonly created?: string;
            /** Format: uri */
            readonly url?: string;
            /** Format: uri */
            readonly group_url?: string;
        };
        PatchedUser: {
            readonly id?: number;
            first_name?: string;
            last_name?: string;
            /** Format: uri */
            avatar?: string | null;
            /** Format: uri */
            readonly url?: string;
            /**
             * Email address
             * Format: email
             */
            email?: string;
        };
        Register: {
            username?: string;
            /** Format: email */
            email: string;
            password1: string;
            password2: string;
        };
        ResendEmailVerification: {
            /** Format: email */
            email: string;
        };
        RestAuthDetail: {
            readonly detail: string;
        };
        SocialLogin: {
            access_token?: string;
            code?: string;
            id_token?: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        TokenVerify: {
            token: string;
        };
        User: {
            readonly id: number;
            first_name: string;
            last_name: string;
            /** Format: uri */
            avatar?: string | null;
            /** Format: uri */
            readonly url: string;
            /**
             * Email address
             * Format: email
             */
            email: string;
        };
        VerifyEmail: {
            key: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    achievements_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAchievementList"];
                };
            };
        };
    };
    achievements_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Achievement"];
                "application/x-www-form-urlencoded": components["schemas"]["Achievement"];
                "multipart/form-data": components["schemas"]["Achievement"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Achievement"];
                };
            };
        };
    };
    achievements_achievers_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                achievement_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
        };
    };
    achievements_achievers_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                achievement_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    achievements_achievers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                achievement_pk: string;
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    achievements_achievers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                achievement_pk: string;
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    achievements_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Achievement"];
                };
            };
        };
    };
    achievements_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AchievementUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["AchievementUpdate"];
                "multipart/form-data": components["schemas"]["AchievementUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementUpdate"];
                };
            };
        };
    };
    achievements_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    achievements_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAchievementUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAchievementUpdate"];
                "multipart/form-data": components["schemas"]["PatchedAchievementUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementUpdate"];
                };
            };
        };
    };
    auth_google_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SocialLogin"];
                "application/x-www-form-urlencoded": components["schemas"]["SocialLogin"];
                "multipart/form-data": components["schemas"]["SocialLogin"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SocialLogin"];
                };
            };
        };
    };
    auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Login"];
                "application/x-www-form-urlencoded": components["schemas"]["Login"];
                "multipart/form-data": components["schemas"]["Login"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JWT"];
                };
            };
        };
    };
    auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_password_change_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordChange"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordChange"];
                "multipart/form-data": components["schemas"]["PasswordChange"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_password_reset_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordReset"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordReset"];
                "multipart/form-data": components["schemas"]["PasswordReset"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_password_reset_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetConfirm"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirm"];
                "multipart/form-data": components["schemas"]["PasswordResetConfirm"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_registration_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Register"];
                "application/x-www-form-urlencoded": components["schemas"]["Register"];
                "multipart/form-data": components["schemas"]["Register"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JWT"];
                };
            };
        };
    };
    auth_registration_resend_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResendEmailVerification"];
                "application/x-www-form-urlencoded": components["schemas"]["ResendEmailVerification"];
                "multipart/form-data": components["schemas"]["ResendEmailVerification"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_registration_verify_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyEmail"];
                "application/x-www-form-urlencoded": components["schemas"]["VerifyEmail"];
                "multipart/form-data": components["schemas"]["VerifyEmail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefresh"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
                "multipart/form-data": components["schemas"]["TokenRefresh"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    auth_token_verify_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenVerify"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenVerify"];
                "multipart/form-data": components["schemas"]["TokenVerify"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenVerify"];
                };
            };
        };
    };
    auth_user_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    auth_user_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    auth_user_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUser"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
                "multipart/form-data": components["schemas"]["PatchedUser"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    feed_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupList"];
                };
            };
        };
    };
    groups_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Group"];
                "application/x-www-form-urlencoded": components["schemas"]["Group"];
                "multipart/form-data": components["schemas"]["Group"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    groups_achievements_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAchievementList"];
                };
            };
        };
    };
    groups_achievements_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Achievement"];
                "application/x-www-form-urlencoded": components["schemas"]["Achievement"];
                "multipart/form-data": components["schemas"]["Achievement"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Achievement"];
                };
            };
        };
    };
    groups_achievements_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Achievement"];
                };
            };
        };
    };
    groups_achievements_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AchievementUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["AchievementUpdate"];
                "multipart/form-data": components["schemas"]["AchievementUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementUpdate"];
                };
            };
        };
    };
    groups_achievements_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_achievements_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAchievementUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAchievementUpdate"];
                "multipart/form-data": components["schemas"]["PatchedAchievementUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementUpdate"];
                };
            };
        };
    };
    groups_images_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedImageList"];
                };
            };
        };
    };
    groups_images_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Image"];
                "application/x-www-form-urlencoded": components["schemas"]["Image"];
                "multipart/form-data": components["schemas"]["Image"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    groups_images_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    groups_images_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Image"];
                "application/x-www-form-urlencoded": components["schemas"]["Image"];
                "multipart/form-data": components["schemas"]["Image"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    groups_images_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_images_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedImage"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedImage"];
                "multipart/form-data": components["schemas"]["PatchedImage"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    groups_members_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
        };
    };
    groups_members_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    groups_members_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_quotes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_quotes_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_quotes_retrieve_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_quotes_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_quotes_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_quotes_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                loregroup_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    groups_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["GroupUpdate"];
                "multipart/form-data": components["schemas"]["GroupUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupUpdate"];
                };
            };
        };
    };
    groups_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGroupUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedGroupUpdate"];
                "multipart/form-data": components["schemas"]["PatchedGroupUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupUpdate"];
                };
            };
        };
    };
    groups_join_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Join"];
                "application/x-www-form-urlencoded": components["schemas"]["Join"];
                "multipart/form-data": components["schemas"]["Join"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Join"];
                };
            };
        };
    };
    images_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedImageList"];
                };
            };
        };
    };
    images_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Image"];
                "application/x-www-form-urlencoded": components["schemas"]["Image"];
                "multipart/form-data": components["schemas"]["Image"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    images_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    images_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Image"];
                "application/x-www-form-urlencoded": components["schemas"]["Image"];
                "multipart/form-data": components["schemas"]["Image"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    images_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    images_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedImage"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedImage"];
                "multipart/form-data": components["schemas"]["PatchedImage"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Image"];
                };
            };
        };
    };
    quotes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    quotes_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    quotes_retrieve_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    quotes_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    quotes_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    quotes_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
        };
    };
    users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUser"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
                "multipart/form-data": components["schemas"]["PatchedUser"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
}
